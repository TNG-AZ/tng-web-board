@page "/events/"
@using System.Web;
@using TNG.Web.Board.Data.DTOs;
@using TNG.Web.Board.Utilities;
@{
    var rsvpClasses = new Dictionary<string, List<string>>
    {
        {"NA", new() { "btn-primary", "btn-outline-primary" } },
        {"Going", new() { "btn-success", "btn-outline-success" } },
        {"MaybeGoing", new() { "btn-secondary", "btn-outline-secondary" }}
    };
}
<div class="container">
    <a href="/about">For more information about TNG COVID-19 policies, please see ABOUT page.</a>
@foreach(var calendarEvent in GetUpcomingEvents())
{
        var rsvp = Member?.Events?.FirstOrDefault(e => e.EventId == calendarEvent.Id);
        var rsvpStatus = rsvp?.Status;
        var isBoard = authStateProvider.GetAuthenticationStateAsync().Result.User.IsInRole("Boardmember");
        var going = GetRsvpMemberList(calendarEvent.Id, EventRsvpStatus.Going, isBoard) ?? string.Empty;
        var maybe = GetRsvpMemberList(calendarEvent.Id, EventRsvpStatus.MaybeGoing, isBoard) ?? string.Empty;
        var startTime = calendarEvent.Start.DateTime.ToAZTime();
        var description = calendarEvent.Description ?? string.Empty;
        <div class="card">
        <div class="card-header">
            <form class="form-inline">
                    <button type="button" @onclick=@(async () => await RsvpDelete(calendarEvent.Id)) class="btn @(rsvpStatus is null ? rsvpClasses["NA"][0] : rsvpClasses["NA"][1])">N/A</button>
                    <button type="button" @onclick=@(async () => await RsvpGoing(calendarEvent.Id)) class="btn @(rsvpStatus is not null && rsvpStatus == EventRsvpStatus.Going ? rsvpClasses["Going"][0] : rsvpClasses["Going"][1])">Going</button>
                    <button type="button" @onclick=@(async () => await RsvpMaybeGoing(calendarEvent.Id)) class="btn @(rsvpStatus is not null && rsvpStatus == EventRsvpStatus.MaybeGoing ? rsvpClasses["MaybeGoing"][0] : rsvpClasses["MaybeGoing"][1])">Maybe Going</button>
                    @if(rsvp is not null)
                    {
                        <button type="button" class="btn btn-info" @onclick=@(() => ShowNotesModal(rsvp))>Manage +1s</button>
                    }
                    <AuthorizeView Roles="Boardmember">
                        <Authorized>
                            <button type="button" @onclick=@(() => navigation.NavigateTo($"/events/manage/{calendarEvent.Id}")) class="btn">Manage RSVP</button>
                        </Authorized>
                    </AuthorizeView>
            </form>
        </div>
        <div class="card-body">
            <h3 class="card-title"><a href="@($"/events/{calendarEvent.Id}")">@calendarEvent.Summary</a></h3>
            <div class="eventDetails">
                <h5><i class="bi bi-clock"></i>@($"Happening on {startTime:MM/dd/yyyy} at {startTime:hh:mm tt}")</h5>
            @if(!string.IsNullOrEmpty(calendarEvent.Location))
            {
                <h5><a href="https://www.google.com/maps/search/?api=1&query=@HttpUtility.UrlEncode(calendarEvent.Location)"><i class="bi bi-map"></i>@calendarEvent.Location</a></h5>
            } 
            </div>
            <p class="card-text">@StringTools.RemoveHtml(description.Substring(0, Math.Min(description.Length, 300)))@(description.Length > 100 ? "..." : string.Empty)</p>
            @if (!string.IsNullOrEmpty(going))
            {
                <p>Going: @((MarkupString)going)</p>
            }
            @if (!string.IsNullOrEmpty(maybe))
            {
                <p>Maybe Going: @((MarkupString)maybe)</p>
            }
        </div>
    </div>
    <br/>
}
</div>