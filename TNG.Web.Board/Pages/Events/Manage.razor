@page "/events/manage/{eventId}"
@using TNG.Web.Board.Data.DTOs;
@using TNG.Web.Board.Utilities;
@{
    var startTime = CalendarEvent.Start.DateTime.ToAZTime();
}
<h3 class="card-title"><a href="@CalendarEvent.HtmlLink">@CalendarEvent.Summary</a></h3>
<h5>@($"Happening on {startTime:MM/dd/yyyy} at {startTime:hh:mm tt}")</h5>

<div class="table-responsive">
    <table class="table">
        <thead>
            <tr>
                <th>Actions</th>
                <th>Scene Name</th>
                <th>Status</th>
                <th>Approval</th>
                <th>Paid</th>
                <th>Proof of vax received</th>
                <th>Membership Issues</th>
            </tr>
        </thead>
        <tbody>
            @foreach(var rsvp in Rsvps)
            {
                var issues = GetMembershipIssues(rsvp.Member);
                var approved = rsvp.Approved ?? false;
                var paid = rsvp.Paid ?? false;
                var hasVaxProof = rsvp.Member.ReceivedProofOfCovid19Vaccination;
                <tr>
                    <td>
                        <CollapsibleCard CardHeaderTitle="Actions">
                            <CardBody>
                                <button type="button" @onclick=@(async () => ToggleApproved(rsvp))>
                                    @(rsvp.Approved ?? false ? "Undo Approval" : "Approve")
                                </button><br/>
                                <button type="button" @onclick=@(async () => TogglePaid(rsvp))>
                                    @(rsvp.Paid ?? false ? "Undo Payment" : "Mark as Paid")
                                </button><br/>
                                <button type="button" @onclick=@(async () => ToggleAttended(rsvp))>
                                    @(rsvp.Attended ?? false ? "Undo Check-In" : "Mark as Here")
                                </button>
                            </CardBody>
                        </CollapsibleCard>
                    </td>
                    <td class=@GetRsvpStatus(rsvp, issues)>@rsvp.Member.SceneName</td>
                    <td>@rsvp.Status.ToString()@(rsvp.Member.MemberType == MemberType.Guest ? " - Guest" : string.Empty)</td>
                    <td class="@(!approved ? "table-warning" : string.Empty)">@(approved.ToString())</td>
                    <td class="@(!paid ? "table-warning" : string.Empty)">@(paid.ToString())</td>
                    <td class="@(!hasVaxProof ? "table-warning" : string.Empty)">@(hasVaxProof.ToString())</td>
                    <td class="@(issues.Status switch { IssuesStatus.Danger => "table-danger", IssuesStatus.Warning => "table-warning", _ => string.Empty })">
                        @string.Join(" ", issues.Issues)
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>