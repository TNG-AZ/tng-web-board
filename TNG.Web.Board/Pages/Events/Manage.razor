@page "/events/manage/{eventId}"
@using TNG.Web.Board.Data.DTOs;
@using TNG.Web.Board.Utilities;
@using Blazored.TextEditor
@{
    var startTime = CalendarEvent.Start.DateTime.ToAZTime();
}
<h3 class="card-title"><a href="@CalendarEvent.HtmlLink">@CalendarEvent.Summary</a></h3>
<h5>@($"Happening on {startTime:MM/dd/yyyy} at {startTime:hh:mm tt}")</h5>

<CollapsibleCard CardHeaderTitle="Email">
    <CardBody>
        <input type="radio" name="emailList" value="@EmailListEnum.All" checked="@(EmailList?.Equals(EmailListEnum.All))" @onchange="EmailListOnChange" />
        <label>All</label>
        <br/>
        <input type="radio" name="emailList" value="@EmailListEnum.GoodStanding" checked="@(EmailList?.Equals(EmailListEnum.GoodStanding))" @onchange="EmailListOnChange" />
        <label>Members in Good Standing</label>
        <br />
        <input type="radio" name="emailList" value="@EmailListEnum.ApprovedAndPaid" checked="@(EmailList?.Equals(EmailListEnum.ApprovedAndPaid))" @onchange="EmailListOnChange" />
        <label>Approved and Paid Members</label>
        <br />
        <label>Subject:</label><input type="text" @bind=@EmailSubject>
        
        <BlazoredTextEditor @ref="@QuillHtml">
            <ToolbarContent>
                <select class="ql-header">
                    <option selected=""></option>
                    <option value="1"></option>
                    <option value="2"></option>
                    <option value="3"></option>
                    <option value="4"></option>
                    <option value="5"></option>
                </select>
                <span class="ql-formats">
                    <button class="ql-bold"></button>
                    <button class="ql-italic"></button>
                    <button class="ql-underline"></button>
                    <button class="ql-strike"></button>
                </span>
                <span class="ql-formats">
                    <select class="ql-color"></select>
                    <select class="ql-background"></select>
                </span>
                <span class="ql-formats">
                    <button class="ql-list" value="ordered"></button>
                    <button class="ql-list" value="bullet"></button>
                </span>
                <span class="ql-formats">
                    <button class="ql-link"></button>
                </span>
            </ToolbarContent>
            <EditorContent>
            </EditorContent>
        </BlazoredTextEditor>
        <button type="button" @onclick=@(async () => await SendEmailToList())>Send Email</button>
    </CardBody>
</CollapsibleCard>

<div class="table-responsive">
    <table class="table">
        <thead>
            <tr>
                <th>Actions</th>
                <th>Scene Name</th>
                <th>Status</th>
                <th>Approval</th>
                <th>Paid</th>
                <th>Proof of vax received</th>
                <th>Membership Issues</th>
            </tr>
        </thead>
        <tbody>
            @foreach(var rsvp in Rsvps)
            {
                var issues = GetMembershipIssues(rsvp.Member);
                var approved = rsvp.Approved ?? false;
                var paid = rsvp.Paid ?? false;
                var hasVaxProof = rsvp.Member.ReceivedProofOfCovid19Vaccination;
                <tr>
                    <td>
                        <CollapsibleCard CardHeaderTitle="Actions">
                            <CardBody>
                                <button type="button" @onclick=@(async () => await ToggleApproved(rsvp))>
                                    @(rsvp.Approved ?? false ? "Undo Approval" : "Approve")
                                </button><br/>
                                <button type="button" @onclick=@(async () => await TogglePaid(rsvp))>
                                    @(rsvp.Paid ?? false ? "Undo Payment" : "Mark as Paid")
                                </button><br/>
                                <button type="button" @onclick=@(async () => await ToggleAttended(rsvp))>
                                    @(rsvp.Attended ?? false ? "Undo Check-In" : "Mark as Here")
                                </button>
                                <button type="button" @onclick=@(() => ShowInvoiceModal(rsvp.Member))>Send Event Invoice</button>
                            </CardBody>
                        </CollapsibleCard>
                    </td>
                    <td class=@GetRsvpStatus(rsvp, issues)>@rsvp.Member.SceneName</td>
                    <td>@rsvp.Status.ToString()@(rsvp.Member.MemberType == MemberType.Guest ? " - Guest" : string.Empty)</td>
                    <td class="@(!approved ? "table-warning" : string.Empty)">@(approved.ToString())</td>
                    <td class="@(!paid ? "table-warning" : string.Empty)">@(paid.ToString())</td>
                    <td class="@(!hasVaxProof ? "table-warning" : string.Empty)">@(hasVaxProof.ToString())</td>
                    <td class="@(issues.Status switch { IssuesStatus.Danger => "table-danger", IssuesStatus.Warning => "table-warning", _ => string.Empty })">
                        @string.Join(" ", issues.Issues)
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>