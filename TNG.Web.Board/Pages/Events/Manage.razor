@page "/events/manage/{eventId}"
@using TNG.Web.Board.Data.DTOs;
@using TNG.Web.Board.Pages.Admin.Volunteering
@using TNG.Web.Board.Utilities;
@using Blazored.TextEditor
@{
    var startTime = CalendarEvent.Start.DateTime.ToAZTime();
}
<h3 class="card-title"><a href="@CalendarEvent.HtmlLink">@CalendarEvent.Summary</a></h3>
<h5>@($"Happening on {startTime:MM/dd/yyyy} at {startTime:hh:mm tt}")</h5>

<CollapsibleCard CardHeaderTitle="Email">
    <CardBody>
        <p>note: VOIDED Rsvps are excluded from email lists, and must be sent manually</p>
        <input type="radio" name="emailList" value="@EmailListEnum.All" checked="@(EmailList?.Equals(EmailListEnum.All))" @onchange="EmailListOnChange" />
        <label>All</label>
        <br/>
        <input type="radio" name="emailList" value="@EmailListEnum.GoodStanding" checked="@(EmailList?.Equals(EmailListEnum.GoodStanding))" @onchange="EmailListOnChange" />
        <label>Members in Good Standing</label>
        <br />
        <input type="radio" name="emailList" value="@EmailListEnum.Paid" checked="@(EmailList?.Equals(EmailListEnum.Paid))" @onchange="EmailListOnChange" />
        <label>Paid Members</label>
        <br />
        <label>Subject:</label><input type="text" @bind=@EmailSubject>
        
        <BlazoredTextEditor @ref="@QuillHtml">
            <ToolbarContent>
                <select class="ql-header">
                    <option selected=""></option>
                    <option value="1"></option>
                    <option value="2"></option>
                    <option value="3"></option>
                    <option value="4"></option>
                    <option value="5"></option>
                </select>
                <span class="ql-formats">
                    <button class="ql-bold"></button>
                    <button class="ql-italic"></button>
                    <button class="ql-underline"></button>
                    <button class="ql-strike"></button>
                </span>
                <span class="ql-formats">
                    <select class="ql-color"></select>
                    <select class="ql-background"></select>
                </span>
                <span class="ql-formats">
                    <button class="ql-list" value="ordered"></button>
                    <button class="ql-list" value="bullet"></button>
                </span>
                <span class="ql-formats">
                    <button class="ql-link"></button>
                </span>
            </ToolbarContent>
            <EditorContent>
            </EditorContent>
        </BlazoredTextEditor>
        <button type="button" @onclick=@(async () => await SendEmailToList())>Send Email</button>
    </CardBody>
</CollapsibleCard>

<CollapsibleCard CardHeaderTitle="Manage Fees">
    <CardBody>
        @if(EventFees is null)
        {
            <button type="button" onclick=@(async () => await CreateDefaultFees())>Create Fees</button>
        }
        @if(EventFees is not null)
        {
            <label>Membership Dues:</label><input type="number" @bind=@EventFees.MembershipDues>
            <br/>
            <label>Event Entry - Member:</label><input type="number" @bind=@(EventFees.MemberEntry)>
            <br/>
            <label>Event Entry - Guest:</label><input type="number" @bind=@(EventFees.GuestEntry)>
            <br/>
            <button type="button" onclick=@(async () => await context.SaveChangesAsync())>Save</button>
        }
        
    </CardBody>
</CollapsibleCard>

<CollapsibleCard CardHeaderTitle="Manage Signatures">
    <CardBody>
        <button type="button" @onclick=@(async () => await GetSignaturesZip())>Download All</button>
        <br/>
        Orphan Signatures
        <ul>
            @{
                var orphans = Signatures
                    .Where(s => !Rsvps.Select(r => r.MemberId).Contains(s.MemberId)
                        && !PlusOnes.Select(p => p.PlusOneMemberId).Contains(s.MemberId));
                foreach(var o in orphans)
                {
                    <li><button type="button" @onclick=@(async () => await GetSignature(o.Id))>@o.SceneName</button></li>
                }
                
            }
        </ul>
    </CardBody>
</CollapsibleCard>

<CollapsibleCard CardHeaderTitle="Manual Add RSVP">
    <CardBody>
        <label>Email: </label><input @bind=@NewRSVPEmail /><button type="button" @onclick=@(async () => AddManualRsvp())>Add RSVP</button>
    </CardBody>
</CollapsibleCard>

<CollapsibleCard CardHeaderTitle="View Settings">
    <CardBody>
        <div class="container">
            <div class="row">
                <div class="col-sm">
                    <h4>Ordering</h4>
                    <input type="radio" checked="@(RsvpOrdering == Ordering.Chronological)"
                        name="Ordering" @onchange="@(() => UpdateOrdering(Ordering.Chronological))" />
                    <label>Chronological</label><br/>
                    <input type="radio" checked="@(RsvpOrdering == Ordering.Alphabetical)"
                           name="Ordering" @onchange="@(() => UpdateOrdering(Ordering.Alphabetical))" />
                    <label>Alphabetical</label>
                </div>
                <div class="col-sm">
                    <h4>Filter</h4>
                    <input type="radio" checked="@(RsvpFiltering == Filtering.Everyone)"
                        name="Filtering" @onchange="@(() => UpdateFiltering(Filtering.Everyone))" />
                    <label>All RSVPs</label><br/>
                    <input type="radio" checked="@(RsvpFiltering == Filtering.Paid)"
                           name="Filtering" @onchange="@(() => UpdateFiltering(Filtering.Paid))" />
                    <label>Paid</label>
                    <input type="radio" checked="@(RsvpFiltering == Filtering.PaidAndNotHere)"
                        name="Filtering" @onchange="@(() => UpdateFiltering(Filtering.PaidAndNotHere))" />
                    <label>Waiting for Arrival</label>
                </div>
            </div>
        </div>
    </CardBody>
</CollapsibleCard>

<CollapsibleCard CardHeaderTitle="Volunteer Slots">
    <CardBody>
        <EventVolunteeringManagement eventId=@eventId/>
        <br/>
        <br/>
        <button type="button" class="btn btn-info" onclick=@(() => ShowVolunteerModal())>Manage Selection</button>
        <button type="button" class="btn btn-info" onclick=@(() => ShowVolunteerModal(false))>View Volunteers</button>
    </CardBody>
</CollapsibleCard>

<button type="button" @onclick=@(() => {UpdateFiltering(Filtering.PaidAndNotHere); UpdateOrdering(Ordering.Alphabetical);})>Refresh Door View</button>

<div class="table-responsive">
    <table class="table">
        <thead>
            <tr>
                <th>Actions</th>
                <th>Scene Name</th>
                <th>Status</th>
                <th>Notes</th>
                <th>Paid</th>
                <th>Membership Issues</th>
                <th>Timestamp</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var rsvp in FilteredRsvps)
            {
                var issues = GetMembershipIssues(rsvp.Member);
                var paid = (rsvp.Paid??false) || rsvp.Member.Invoices.Any(i => i.EventId == eventId && i.PaidOnDate.HasValue);
                var addedDate = rsvp!.AddedDate.HasValue ? DateTime.SpecifyKind(rsvp.AddedDate.Value, DateTimeKind.Utc).ToAZTime()
                : (DateTime?)null;
                var memberSignatures = Signatures.Where(s => s.MemberId == rsvp.MemberId).Select(s => s.Id);
                var plusOnes = PlusOnes.Where(p => p.MemberId == rsvp.MemberId);
                var checkIdText = GetCheckIdText(rsvp.Member);
                <tr>
                    <td>
                        <CollapsibleCard CardHeaderTitle="Actions">
                            <CardBody>
                                <button type="button" @onclick=@(async () => await ShowProfileEditModal(rsvp.Member))>
                                    @checkIdText
                                </button><br/>
                                <button type="button" @onclick=@(async () => await TogglePaid(rsvp))>
                                    @(rsvp.Paid ?? false ? "Undo Payment" : "Mark as Paid")
                                </button><br/>
                                <button type="button" @onclick=@(async () => await ToggleAttended(rsvp))>
                                    @(rsvp.Attended ?? false ? "Undo Check-In" : "Mark as Here")
                                </button><br />
                                @if (rsvp.Attended ?? false)
                                {
                                    <button type="button" @onclick=@(async () => await UpdateMembership(rsvp.Member))>Update Dues/Orientation</button>
                                }
                                <button type="button" @onclick=@(() => ShowInvoiceModal(rsvp.Member))>
                                    Send Event Invoice
                                </button><br />
                                <button type="button" @onclick=@(() => ShowNotesModal(rsvp))>
                                    Manage Notes
                                </button><br />
                                <button onclick=@(async () => await VoidRsvp(rsvp))>VOID</button>
                            </CardBody>
                        </CollapsibleCard>
                        @if (plusOnes.Any())
                        {
                            <button type="button" @onclick=@(() => ToggleExpand(rsvp.Id))>Expand +1s</button>
                        }
                    </td>
                    <td class=@GetRsvpStatus(rsvp, issues)>
                        <a href="/members/view/@rsvp.Member.Id">@rsvp.Member.SceneName</a>
                        <br/>
                        (@rsvp.Member.EmailAddress)
                    </td>
                    <td class="@(rsvp.VoidedDate != null ? "table-danger" : string.Empty)">
                        @if (rsvp.VoidedDate != null)
                        {
                            <p>VOIDED</p>
                        }
                        else
                        {
                            @rsvp.Status.ToString()@(rsvp.Member.MemberType == MemberType.Guest ? " - Guest" : string.Empty)
                        }
                    </td>
                    <td>
                        @if (plusOnes.Any())
                        {
                            var plusOneString = string.Join(", ", plusOnes.Select(p => p.PlusOne.SceneName));
                            var sentInvoices = rsvp.Member.Invoices.Where(i => i.EventId == eventId);
                            <p>Plus Ones: @plusOneString</p>
                            @if (sentInvoices.Any() && (plusOnes.Max(p => p.CreatedDT) > sentInvoices.Max(i => i.SendOnDate)))
                            {
                                <p class="alert-warning">Warning: Plus one added after most recent invoice sent</p>
                            }
                        }
                        @if(memberSignatures.Any())
                        {
                            foreach(var s in memberSignatures)
                            {
                                <button type="button" @onclick=@(async () => await GetSignature(s))>Get Signature</button>
                            }
                            <br />
                        }
                        @if (!string.IsNullOrEmpty(rsvp.Notes))
                        {
                            <p>Notes: @rsvp.Notes</p>
                        }
                        
                    </td>
                    <td class="@(!paid ? "table-warning" : string.Empty)">
                        @if(rsvp.Paid??false)
                        {
                            <p>Paid</p>
                        }
                        @foreach(var invoice in rsvp.Member.Invoices.Where(i => i.EventId == eventId).OrderBy(i => i.SendOnDate))
                        {
                            <p>Invoice sent on @invoice.SendOnDate.ToAZTime().ToString("yyyy-MM-dd")</p>
                            @if(invoice.PaidOnDate.HasValue)
                            {
                                <p>Invoice paid on @invoice.PaidOnDate.ToAZTime().Value.ToString("yyyy-MM-dd")</p>
                            }
                        }

                    </td>
                    <td class="@(issues.Status switch { IssuesStatus.Danger => "table-danger", IssuesStatus.Warning => "table-warning", _ => string.Empty })">
                        @string.Join(" ", issues.Issues)
                    </td>
                    <td>
                        @(addedDate.HasValue ? $"{ addedDate.Value.ToString("yyyy-MM-dd")} {addedDate.Value.ToString("HH:mm")}" : string.Empty)
                   </td>
                </tr>
                @if(plusOnes.Any() && ExpandedPlusOnes.Contains(rsvp.Id))
                {
                    foreach (var p in plusOnes)
                    {
                        var member = p.PlusOne;
                        var plusOneIssues = GetMembershipIssues(member);
                        var plusOneSignatures = Signatures.Where(s => s.MemberId == member.Id).Select(s => s.Id);
                        var checkIdPlusOneText = GetCheckIdText(member);
                        <tr>
                            <td>
                                <button type="button" @onclick=@(async () => await ShowProfileEditModal(member))>
                                    @checkIdPlusOneText
                                </button>
                                @if (rsvp.Attended ?? false)
                                {
                                    <button type="button" @onclick=@(async () => await UpdateMembership(member))>Update Dues/Orientation</button>
                                }
                            </td>
                            <td class=@GetRsvpStatus(rsvp, issues)>
                                <a href="/members/view/@member.Id">(+1 of @rsvp.Member.SceneName) @member.SceneName</a>
                                <br />
                                (@member.EmailAddress)
                            </td>
                            <td>@member.MemberType</td>
                            <td>
                                @if(plusOneSignatures.Any())
                                {
                                    foreach(var s in plusOneSignatures)
                                    {
                                        <button type="button" @onclick=@(async () => await GetSignature(s))>Get Signature</button>
                                    }
                                    <br />
                                }
                            </td>
                            <td></td>
                            <td></td>
                            <td class="@(plusOneIssues.Status switch { IssuesStatus.Danger => "table-danger", IssuesStatus.Warning => "table-warning", _ => string.Empty })">
                                @string.Join(" ", plusOneIssues.Issues)
                            </td>
                            <td>
                                @p.CreatedDT.ToString("yyyy-MM-dd HH:mm")
                            </td>
                        </tr>
                    }
                }
            }
        </tbody>
    </table>
</div>