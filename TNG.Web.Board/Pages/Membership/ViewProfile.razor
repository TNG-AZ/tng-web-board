@page "/members/view/{memberId:guid?}"

@if (UserMember is null)
{
    navigation.NavigateTo("/members/new");
}
@if(!EnableEdit || !EditSceneNameToggle)
{
    <h3>@ViewMember?.SceneName</h3>
}
else
{
    <label>Scene Name: </label><input type="text" @bind=@NewSceneName /><br>
    <button type="button" @onclick="@(async () => await SubmitSceneName())">Submit</button>
}

@if(EnableEdit & !EditSceneNameToggle)
{
    <button type="button" @onclick=@(() => { NewSceneName = UserMember?.SceneName; EditSceneNameToggle = !EditSceneNameToggle;})>Edit scene name</button>
}
<h4>About</h4>
@if (EnableEdit)
{
    <button type="button" @onclick="@(async () => await TogglePrivate())">@TogglePrivateButtonText</button>
}
<p>TODO - implement about sections</p>
<h4>Fetishes</h4>
@if (EnableEdit)
{
    <EditForm EditContext="editContext" OnValidSubmit="@(async () => await AddFetishToMember())" class="form-inline">
        <div class="form-group">
            <input type="text" list="fetishes" @bind="@NewFetishName" class="form-control" placeholder="Fetish" />
            <datalist id="fetishes">
                @foreach (var fetish in Fetishes)
                {
                        <option value="@fetish.Name" />
                }
            </datalist>
        </div>
        <div class="form-group">
            <select required="required" class="form-control" @onchange="NewFetishRoleChange">
                <option value="" selected>Role</option>
                <option value="0">Top</option>
                <option value="1">Bottom</option>
                <option value="2">Switch</option>
            </select>
        </div>
        <div class="form-group">
            <input type="checkbox" class="form-check-input" @bind="NewFetishWillingToTeach" /><label class="form-check-label">Willing to teach?</label>
        </div>
        <button type="submit">Add</button>
    </EditForm>
}

@foreach (var fetish in ViewMember?.MemberFetishes)
{
    <span class="badge badge-pill badge-secondary">@fetish.Fetish.Name@(!string.IsNullOrEmpty(fetish.Role?.ToString()) ? $" ({fetish.Role.ToString()})" : string.Empty)@(fetish.WillingToTeach ?? false ? " (Willing to teach)" : string.Empty)
    @if (EnableEdit)
    {
        <button type="button" class="close" data-dismiss="alert" aria-label="Close" @onclick=@(async () => await UnlinkFetish(fetish.Id))><span aria-hidden="true">&times;</span></button>
    }
    </span>
}
