@page "/members/view/"
@page "/members/view/{profileUrl}"
@using TNG.Web.Board.Utilities;

@if (UserMember is null)
{
    navigation.NavigateTo("/members/new");
}

<HeadContent>
    <meta property="og:title" content="TNG:AZ Member" />
    <meta property="og:description" content="View Profile" />
</HeadContent>

<AuthorizeView Roles="Boardmember">
    <Authorized>
        <button @onclick="@(async () => await GenerateDuesInvoice())">Send Dues Invoice</button><br/>
        <a href="/members/edit/@ViewMember?.Id">Manage DB Entry</a><br />
    </Authorized>
</AuthorizeView>

<div class="container user-profile">
    <div class="row justify-content-start">
        <div class="col-sm">
                <h3>
                    @ViewMember?.SceneName
                    @if (EnableEdit)
                    {
                        <button type="button" class="btn btn-secondary edit-button" @onclick=@(async () => await ShowProfileEditModal())>Edit Profile</button>
                    }
                </h3>
                @if (EnableEdit || auth.IsBoardmember().Result){
                    var maxOrientationDate = (ViewMember?.Orientations?.Any() ?? false)
                        ? ViewMember.Orientations.Max(o => o.DateReceived)
                        : (DateTime?)null;
                    var maxDuesDate = (ViewMember?.Payments?.Any() ?? false)
                    ? ViewMember.Payments.Max(p => p.PaidOn)
                    : (DateTime?)null;
                    var duesCurrent = maxOrientationDate is not null && maxOrientationDate > DateTime.UtcNow.AddYears(-1).ToAZTime();
                    var orientationCurrent = maxDuesDate is not null && maxDuesDate > DateTime.UtcNow.AddYears(-1).ToAZTime();

                    if (maxDuesDate is not null && maxOrientationDate is not null)
                    {
                        var expiryDate = ((maxDuesDate > maxOrientationDate) ? maxDuesDate.Value : maxOrientationDate.Value)
                            .AddYears(1)
                            .ToString("MM/dd/yyyy");
                        
                        if (duesCurrent && orientationCurrent)
                        {
                            <p>Membership Current (Expires @expiryDate)</p>
                        }
                        else
                        {
                            <p>Membership Lapsed (Expired @expiryDate)</p>
                        }
                    }
                    else
                    {
                        <p>Has not started membership</p>
                    }
                }
                @if (!string.IsNullOrEmpty(ViewMember?.Pronouns))
                {
                    <p>Pronouns: @ViewMember.Pronouns</p>
                }

            <h4>About</h4>
            <p>@ViewMember?.AboutMe</p>
        </div>
        @{
            var activity = GetEventRsvps();
        }
        @if(!string.IsNullOrEmpty(activity))
        {
            <div class="col-sm">
                <h4>Activity</h4>
                <ul><li>@((MarkupString)activity)</li></ul>
            </div>
        }
        @if ((ViewMember.MemberFetishes?.Any() ?? false) || EnableEdit)
        {
            <div class="col-sm">
                @if (EnableEdit)
                {
                    <datalist id="fetishes">
                        @foreach (var fetish in Fetishes)
                        {
                            <option value="@fetish.Name" />
                        }
                    </datalist>
                    <h4>Edit Kinks</h4>
                    <EditForm EditContext="editContext" OnValidSubmit="@(async () => await AddFetishToMember())" class="form-inline">
                        <div class="form-group">
                            <input type="text" list="fetishes" @bind="@NewFetishName" class="form-control" placeholder="Fetish" />
                        </div>
                        <div class="form-group">
                            <select required="required" class="form-control" @onchange="NewFetishRoleChange">
                                <option value="" selected>Role</option>
                                <option value="0">Top</option>
                                <option value="1">Bottom</option>
                                <option value="2">Switch</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <input type="checkbox" class="form-check-input" @bind="NewFetishWillingToTeach" /><label class="form-check-label">Willing to teach?</label>
                        </div>
                        <button type="submit">Add</button>
                    </EditForm>
                }

                @if (EnableEdit)
                {
                    <h4>Edit Limits</h4>
                    <EditForm EditContext="editContext" OnValidSubmit="@(async () => await AddFetishToMember(true))" class="form-inline">
                        <div class="form-group">
                            <input type="text" list="fetishes" @bind="@NewFetishName" class="form-control" placeholder="Limit" />
                            
                        </div>
                        <div class="form-group">
                            <select required="required" class="form-control" @onchange="NewFetishRoleChange">
                                <option value="" selected>Role</option>
                                <option value="0">Top</option>
                                <option value="1">Bottom</option>
                                <option value="2">Switch</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <input type="checkbox" class="form-check-input" @bind="NewFetishHardLimit" /><label class="form-check-label">Hard limit?</label>
                        </div>
                        <button type="submit">Add</button>
                    </EditForm>
                }

                @{
                    var fetishes = ViewMember?.MemberFetishes?.Where(f => !f.Limit);
                    var limits = ViewMember?.MemberFetishes?.Where(f => f.Limit);
                    if (fetishes?.Any() ?? false)
                    {

                        <h4>Fetishes</h4>
                        foreach (var fetish in fetishes)
                        {
                            <span class="badge badge-pill badge-secondary">
                                @fetish.Fetish.Name@(!string.IsNullOrEmpty(fetish.Role?.ToString()) ? $" ({fetish.Role.ToString()})" : string.Empty)@(fetish.WillingToTeach ?? false ? " (Willing to teach)" : string.Empty)
                                @if (EnableEdit)
                                {
                                    <button type="button" class="close" data-dismiss="alert" aria-label="Close" @onclick=@(async () => await UnlinkFetish(fetish.Id))><span aria-hidden="true">&times;</span></button>
                                }
                            </span>
                        }
                    }
                    
                    if (limits?.Any() ?? false)
                    {
                        <h4>Limits</h4>
                        foreach (var fetish in limits)
                        {
                            <span class="badge badge-pill badge-secondary">@fetish.Fetish.Name@(!string.IsNullOrEmpty(fetish.Role?.ToString()) ? $" ({fetish.Role.ToString()})" : string.Empty)@(fetish.HardLimit ?? false ? " (Hard limit)" : string.Empty)
                                @if (EnableEdit)
                                {
                                    <button type="button" class="close" data-dismiss="alert" aria-label="Close" @onclick=@(async () => await UnlinkFetish(fetish.Id))><span aria-hidden="true">&times;</span></button>
                                }
                            </span>
                        }
                    }
                }
                </div>
            }
        </div>
</div>
